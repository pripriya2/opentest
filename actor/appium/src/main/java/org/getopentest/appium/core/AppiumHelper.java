package org.getopentest.appium.core;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.MobileElement;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import org.getopentest.logging.Logger;
import org.getopentest.util.Config;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;

/**
 * Helper class that in mainly responsible with initializing the Appium driver
 * and exposing it to test actions.
 */
public final class AppiumHelper {

    private static Config config;

    private static AppiumDriver<MobileElement> driver;

    private static int explicitWaitSec;
    
    private static boolean invertHorizontalSwipe;
    
    private static boolean invertVerticalSwipe;

    /**
     * Platform name, in lowercase ("ios" or "android").
     */
    private static String platform;
    private static String deviceName;

    static {
        config = Config.load("actor.yaml");
        explicitWaitSec = config.getInteger("appium.explicitWaitSec", 10);
        invertHorizontalSwipe = config.getBoolean("appium.invertHorizontalSwipe", false);
        invertVerticalSwipe = config.getBoolean("appium.invertVerticalSwipe", false);
    }

    /**
     * Copies a set of desired capabilities from a map object into a
     * DesiredCapabilities object.
     */
    private static void copyCapabilities(Map<String, Object> sourceCapsMap, DesiredCapabilities destinationCaps) {
        for (Map.Entry<String, Object> capEntry : sourceCapsMap.entrySet()) {
            destinationCaps.setCapability(capEntry.getKey(), capEntry.getValue());
        }
    }

    private static AppiumDriver<MobileElement> createDriver(String url, Map<String, Object> capsMap) {
        if (url == null) {
            url = AppiumHelper.getConfig().getString("appium.appiumServerUrl", "http://127.0.0.1:4723/wd/hub");
        }

        Logger.info(String.format("Using Appium server URL \"%s\"", url));

        if (capsMap == null) {
            capsMap = new HashMap<String, Object>();
        }

        String platformLowercase = getCapabilityAsString(
                capsMap,
                "platformName",
                getCapabilityAsString(
                        capsMap,
                        "platform",
                        config.getString("appium.desiredCapabilities.platformName", null)));
        if (platformLowercase != null) {
            platformLowercase = platformLowercase.trim().toLowerCase();
        } else {
            throw new RuntimeException(
                    "The \"platformName\" capability was not populated in "
                    + "configuration. Please provide a value for it in the "
                    + "\"appium.desiredCapabilities.platformName\" key. The valid "
                    + "values are \"iOS\" or \"Android\".");
        }
        AppiumHelper.platform = platformLowercase;
        String devicename = getCapabilityAsString(
                capsMap,
                "deviceName",
                getCapabilityAsString(
                        capsMap,
                        "deviceName",
                        config.getString("appium.desiredCapabilities.deviceName", null)));
        System.out.println("************ DEVICE NAME **********"+devicename);
        AppiumHelper.deviceName = devicename;
        AppiumDriver<MobileElement> newDriver;

        DesiredCapabilities caps = new DesiredCapabilities();
        caps.setCapability(CapabilityType.BROWSER_NAME, "");
        caps.setCapability("newCommandTimeout", 600);

        injectCapsFromConfig(caps);

        try {
            if (platform.equalsIgnoreCase("android")) {
            	
            	if(AppiumHelper.deviceName.equals(null)) {
            		caps.setCapability("deviceName", "Android Emulator");
            	}else {
            		caps.setCapability("deviceName", AppiumHelper.deviceName );
            	}
                
                caps.setCapability("platformName", "Android");

                copyCapabilities(capsMap, caps);

                Logger.info("Creating Appium Android driver...");
                newDriver = new AndroidDriver<>(new URL(url), caps);
            } else if (platform.equalsIgnoreCase("ios")) {
            	if(AppiumHelper.deviceName.equals(null)) {
            		caps.setCapability("deviceName", "iOS Emulator");
            	}else {
            		caps.setCapability("deviceName", AppiumHelper.deviceName );
            	}
                caps.setCapability("platformName", "iOS");

                copyCapabilities(capsMap, caps);

                Logger.info("Creating Appium iOS driver...");
                newDriver = new IOSDriver<>(new URL(url), caps);
            } else {
                throw new RuntimeException(
                        "Failed to instantiate Appium driver. The \"platformName\" "
                        + "capability is missing or is specified incorrectly. The valid "
                        + "values are \"iOS\" or \"Android\".");
            }
        } catch (MalformedURLException ex) {
            throw new RuntimeException("Failed to initialize Appium", ex);
        }
        newDriver.manage().timeouts().implicitlyWait(60, TimeUnit.SECONDS);
        return newDriver;
    }

    public static AppiumDriver<MobileElement> createDriverWithRetries(String url, Map<String, Object> capsMap) {
        int retriesLeft = config.getInteger("appium.initRetries", 3);

        while ((driver == null) && retriesLeft > 0) {
            --retriesLeft;

            try {
                driver = createDriver(url, capsMap);
                return driver;
            } catch (Exception ex) {
                if (retriesLeft > 0) {
                    Logger.warning(String.format(
                            "Caught a %s exception while initializing Appium. Retries left: %s",
                            ex.getClass().getName(),
                            String.valueOf(retriesLeft)));
                    discardDriver();
                    
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException ex1) {
                    }
                } else {
                    throw ex;
                }
            }
        }

        return null;
    }

    /**
     * Calls driver.quit() and sets the driver instance to null.
     */
    public static void discardDriver() {
        if (driver != null) {
            try {
                driver.quit();
            } catch (Exception ex) {
                Logger.warning("Failed to quit the Appium driver", ex);
            }

            driver = null;
        }
    }

    public static String getCapabilityAsString(Map<String, Object> capsMap, String capabilityName) {
        return getCapabilityAsString(capsMap, capabilityName, null);
    }

    public static String getCapabilityAsString(Map<String, Object> capsMap, String capabilityName, String defaultValue) {
        if (capsMap == null) {
            return defaultValue;
        }

        Object capabilityObject = capsMap.getOrDefault(capabilityName, defaultValue);
        if (capabilityObject != null) {
            return capabilityObject.toString();
        } else {
            return null;
        }
    }

    public static Config getConfig() {
        return config;
    }

    public static AppiumDriver<MobileElement> getDriver() {
        // If driver exists, verify that it is healthy
        if (driver != null) {
            try {
                // Just a command to force the driver to talk to the device
                driver.getPageSource();
            } catch (Exception ex) {
                discardDriver();
            }
        }

        if (driver == null) {
            createDriverWithRetries(null, null);
            int implicitWaitSec = config.getInteger("appium.implicitWaitSec", 0);
            driver.manage().timeouts().implicitlyWait(implicitWaitSec, TimeUnit.SECONDS);
        }

        return driver;
    }

    /**
     * Returns the default Appium explicit wait time in seconds.
     *
     * @return Explicit wait time in seconds
     */
    public static int getExplicitWaitSec() {
        return explicitWaitSec;
    }

    /**
     * Returns the value of the appium.invertHorizontalSwipe config parameter.
     */
    public static boolean getInvertHorizontalSwipe() {
        return invertHorizontalSwipe;
    }
    
    /**
     * Returns the value of the appium.invertVerticalSwipe config parameter.
     */
    public static boolean getInvertVerticalSwipe() {
        return invertVerticalSwipe;
    }
    
    public static String getPlatform() {
        return platform;
    }

    /**
     * Inject desired capabilities from configuration into the specified
     * DesiredCapabilities object.
     */
    private static void injectCapsFromConfig(DesiredCapabilities caps) {
        Object capsFromConfig = config.get("appium.desiredCapabilities", null);

        if (capsFromConfig instanceof Map) {
            Map<String, Object> capsFromConfigMap = (Map) capsFromConfig;
            for (Map.Entry entry : capsFromConfigMap.entrySet()) {
                if (entry.getValue() != null) {
                    caps.setCapability(entry.getKey().toString(), entry.getValue());
                }
            }
        }
    }

    public static boolean isPlatform(String platform) {
        return AppiumHelper.platform.equalsIgnoreCase(platform.trim());
    }
}
